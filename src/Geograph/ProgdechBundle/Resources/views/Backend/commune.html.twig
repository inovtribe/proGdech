{% extends 'GeographProgdechBundle:Backend:backend_layout.html.twig' %}
{% set adminMenu = true %}

{% block content %}
        <h2 class="text-center">{{ block('title') }}</h2>
        <article class="col-sm-9">
            <div id="map" class="h800"></div>
        </article>
        {% autoescape 'js'%}
        <script>     
            var geojson = L.geoJson(gestionnairelayer);
            geojson.setStyle({"color": 'red', "weight": 1, "fill" : true, smoothFactor: 1, "fillOpacity": 0.025});
            
            var topo = L.tileLayer('{{ topolayer.url|raw }}', {attribution: '{{ topolayer.attribution|raw }}'});
            var aerial = L.tileLayer("{{ aeriallayer.url|raw }}", {attribution: "{{ aeriallayer.attribution|raw }}"});
            var baseMaps = {"Carte": topo, "Vue aerienne": aerial};
            var overlayMaps = {};
            var map = L.map('{{ carte.div|raw }}', {center: [{{ carte.latitudeview|raw }}, {{ carte.longitudeview|raw }}], zoom: {{ carte.zoom|raw }}, layers: [topo, geojson]});
            L.control.layers(baseMaps, overlayMaps).addTo(map);
            
            commune = L.geoJson(geometriescommunales, {
                filter: filtre, style: style}).addTo(map); 
            map.fitBounds(commune.getBounds()).setMaxBounds(commune.getBounds());
            
            marker = L.icon({
                iconUrl: '{{ marker.filename|raw }}',

                iconSize:     {{ marker.size|raw }},
                iconAnchor:   {{ marker.anchor|raw }},
                popupAnchor:  {{ marker.popupanchor|raw }}
            });
            
            
            {% for pointcollecte in pointscollecte %}
                L.marker([{{ pointcollecte.latitude }}, {{ pointcollecte.longitude }}], {icon: marker}).bindPopup("<a href=\"/admin/pointcollecte/{{pointcollecte.id}}\">{{ pointcollecte.nom }}</a>").addTo(map);
            {% endfor %}
            function style (feature){
                return {
                fillColor: 'green',
                fillOpacity: 0.15,
                weight: 1,
                opacity: 1,
                color: 'green',
                dashArray: '1'};
            }
            function filtre(feature, layer) {
                return feature.properties.INSEE == {{ commune.insee }};
            }
        </script>
        {% endautoescape %}
{% endblock %}
