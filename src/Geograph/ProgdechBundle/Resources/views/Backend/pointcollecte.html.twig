{% extends 'GeographProgdechBundle:Backend:backend_layout.html.twig' %}
{% set adminMenu = true %}

{% block title %}Détail d'un point de collecte{% endblock %}

{% block content %}
{% for flashMessage in app.session.flashbag.get('success') %}
<div class="alert alert-success">
    {{ flashMessage }}
</div>
{% endfor %}
<div class="row">
    <div class="col-md-9">
        <div id="map" class="h800"></div>
    </div>
    <div class="col-md-3">
        <div class="panel panel-green">
            <div class="panel-heading">
                <h3 class="panel-title">{{ actif_pointcollecte.nom }}</h3>
            </div>
            <p>{{ actif_pointcollecte.reference }}</p>
            <p><small>situé</small> {{ actif_pointcollecte.adresse }} <small>à</small> <a href="{{ app.request.basepath }}/admin/commune/{{ actif_pointcollecte.commune.insee }}">{{ actif_pointcollecte.commune.nom }}</a></p>
            <p><small>Créé le </small>{{ actif_pointcollecte.date|date('d/m/Y') }}<small> par</small> <a href="{{ app.request.basepath }}/admin/user/{{ actif_pointcollecte.user.id }}">{{ actif_pointcollecte.user.prenom }} {{ actif_pointcollecte.user.nom }}</a></p>
            <p>Nombre d'emplacements : {{ actif_pointcollecte.emplacement }} ({{ actif_pointcollecte.emplacementsaffectes }} affecté(s) | {{ actif_pointcollecte.emplacementsdisponibles }} disponible(s))</p>

            {% for bac in actif_pointcollecte.bacs %}
                {{ bac.reference }}
            {% endfor %}
            <div id="donut-example" style="height: 250px;"></div>
        </div>
    </div>
    {% autoescape %}
        <script>
            // Code général de la carte
            {{ include('GeographProgdechBundle:Backend:carte.js.twig') }}
            
            // Affichage des markers points de collecte
            {{ include('GeographProgdechBundle:Backend:boucle_pointscollecte.js.twig') }}
                
            // Code spécifique de la carte
            var markeractif = L.icon({
                iconUrl: '    {{ actif_pointcollecte.marker.filename|raw }}',
                iconSize:     {{ actif_pointcollecte.marker.size|raw }},
                iconAnchor:   {{ actif_pointcollecte.marker.anchor|raw }},
                popupAnchor:  {{ actif_pointcollecte.marker.popupanchor|raw }}
            });    
            marker = L.marker([{{ actif_pointcollecte.latitude }}, {{ actif_pointcollecte.longitude }}], {icon: markeractif}).addTo(map);
            marker.bindLabel('{{ actif_pointcollecte.nom}}');
            
            // Centrage de la vue sur le point actif
            map.setView([{{ actif_pointcollecte.latitude }}, {{ actif_pointcollecte.longitude }}], 16);
            
            new Morris.Donut({
              element: 'donut-example',
              data: [
                {label: "Ordures Ménagères", value: 4},
                {label: "Tri sélectif", value: 3},
                {label: "Verre", value: 1}
              ],
              colors: ['#606060','#E5FF00','#001EFF']
            });
        </script>
    {% endautoescape %}

</div>

{% endblock %}